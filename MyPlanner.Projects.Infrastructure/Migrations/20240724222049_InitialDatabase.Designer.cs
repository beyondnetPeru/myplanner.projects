// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyPlanner.Projects.Infrastructure.Database;

#nullable disable

namespace MyPlanner.Projects.Infrastructure.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20240724222049_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("myplanner-projects")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyPlanner.IntegrationEventLogEF.IntegrationEventLogEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("TimesSent")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.ToTable("IntegrationEventLog", "myplanner-projects");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.BacklogTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("backlogs", "myplanner-projects");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.BudgetTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("budgets", "myplanner-projects");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.FeatureTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BacklogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BacklogId");

                    b.ToTable("features", "myplanner-projects");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.ProjectTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Track")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("projects", "myplanner-projects");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.ScopeTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("scopes", "myplanner-projects");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.StakeHolderTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("stakeholders", "myplanner-projects");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("requests", "myplanner-projects");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.BacklogTable", b =>
                {
                    b.HasOne("MyPlanner.Projects.Infrastructure.Database.Tables.ProjectTable", "Project")
                        .WithMany("Backlogs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MyPlanner.Projects.Infrastructure.Database.Tables.AuditTable", "Audit", b1 =>
                        {
                            b1.Property<string>("BacklogTableId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("CreatedAt")
                                .IsRequired()
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<TimeSpan?>("TimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("TimeSpan");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("BacklogTableId");

                            b1.ToTable("backlogs", "myplanner-projects");

                            b1.WithOwner()
                                .HasForeignKey("BacklogTableId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.BudgetTable", b =>
                {
                    b.HasOne("MyPlanner.Projects.Infrastructure.Database.Tables.ProjectTable", "Project")
                        .WithMany("Budgets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MyPlanner.Projects.Infrastructure.Database.Tables.AuditTable", "Audit", b1 =>
                        {
                            b1.Property<string>("BudgetTableId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("CreatedAt")
                                .IsRequired()
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<TimeSpan?>("TimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("TimeSpan");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("BudgetTableId");

                            b1.ToTable("budgets", "myplanner-projects");

                            b1.WithOwner()
                                .HasForeignKey("BudgetTableId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.FeatureTable", b =>
                {
                    b.HasOne("MyPlanner.Projects.Infrastructure.Database.Tables.BacklogTable", "Backlog")
                        .WithMany("Features")
                        .HasForeignKey("BacklogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MyPlanner.Projects.Infrastructure.Database.Tables.AuditTable", "Audit", b1 =>
                        {
                            b1.Property<string>("FeatureTableId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("CreatedAt")
                                .IsRequired()
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<TimeSpan?>("TimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("TimeSpan");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("FeatureTableId");

                            b1.ToTable("features", "myplanner-projects");

                            b1.WithOwner()
                                .HasForeignKey("FeatureTableId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();

                    b.Navigation("Backlog");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.ProjectTable", b =>
                {
                    b.OwnsOne("MyPlanner.Projects.Infrastructure.Database.Tables.AuditTable", "Audit", b1 =>
                        {
                            b1.Property<string>("ProjectTableId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("CreatedAt")
                                .IsRequired()
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<TimeSpan?>("TimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("TimeSpan");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("ProjectTableId");

                            b1.ToTable("projects", "myplanner-projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectTableId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.ScopeTable", b =>
                {
                    b.HasOne("MyPlanner.Projects.Infrastructure.Database.Tables.ProjectTable", "Project")
                        .WithMany("Scopes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MyPlanner.Projects.Infrastructure.Database.Tables.AuditTable", "Audit", b1 =>
                        {
                            b1.Property<string>("ScopeTableId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("CreatedAt")
                                .IsRequired()
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<TimeSpan?>("TimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("TimeSpan");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("ScopeTableId");

                            b1.ToTable("scopes", "myplanner-projects");

                            b1.WithOwner()
                                .HasForeignKey("ScopeTableId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.StakeHolderTable", b =>
                {
                    b.HasOne("MyPlanner.Projects.Infrastructure.Database.Tables.ProjectTable", "Project")
                        .WithMany("StakeHolders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MyPlanner.Projects.Infrastructure.Database.Tables.AuditTable", "Audit", b1 =>
                        {
                            b1.Property<string>("StakeHolderTableId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime?>("CreatedAt")
                                .IsRequired()
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<TimeSpan?>("TimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("TimeSpan");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("StakeHolderTableId");

                            b1.ToTable("stakeholders", "myplanner-projects");

                            b1.WithOwner()
                                .HasForeignKey("StakeHolderTableId");
                        });

                    b.Navigation("Audit")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.BacklogTable", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("MyPlanner.Projects.Infrastructure.Database.Tables.ProjectTable", b =>
                {
                    b.Navigation("Backlogs");

                    b.Navigation("Budgets");

                    b.Navigation("Scopes");

                    b.Navigation("StakeHolders");
                });
#pragma warning restore 612, 618
        }
    }
}
